Changes:	

* Oasis suite seems a bit bogus:
	- xmltest/valid/sa/094.xml fails the test (they made this a not well-formed test which
	  is questionable since paramater entities are not recognized if they occur within attribute
	  value definitions)
	- sun:invalid:utf16b.xml and sun:invalid:utf16l.xml parse but they shouldn't (I'm not
	  sure why they're supposed to be invalid)
	- Some of the oasis tests are improperly marked invalid (eg "oasis/p01pass1.xml").
	- oasis/p64fail1.xml is bogus?
	- valid-sa-069, valid-sa-076, valid-sa-090, valid-sa-091 have the wrong output files
	- a few tests are using namespaces, eg sun/invalid/required02.xml
	- OUTPUT3 isn't used
	- Japanese tests don't work too well (only 2 out of 12 pass)
* Replace CHECK_INVARIANT() with CALL_INVARIANT.

To Do:

             Runtime
               |
              Core
               |
   ----------------------------	
   |               |          |
  Files          Parsing    Quesa
   |               |
   ------------    |
   |       |   \   |
Graphics  COM   XML Parser
   |       |       
   ---------
       |
       UI

* Zinc and XVT no longer support Mac?
* Work on XDebugMalloc:
	- Only zaps the first kilobyte of blocks.
	- Deallocate zaps the entire block (instead of just the user area).
* Make sure DocSkeleton runs natively. 
* Make sure ASSERT works OK.
* Delete the Carbon pch's in DropSkeleton
* Add the Willow InterfacePtr changes.
* Dependency in Core.mcp in target „Debug Intel DLL to zlib.mcp is not set
* Look at http://oonumerics.org/tmpw00/striegnitz.html
* XML Parser Tester.mcp doesn't compile.
* XInterfacePtr can use operator const void* for comparisons.

* Invariant code should use a vector (see how big this gets).
* Rename invariant macros. Search the code for ASSERT and change as needed.
* Progress bars are 16-bit?
* Work on Carbon:
	- Use ScrollWindowRect
	- Look at DrawThemeTextBox
	- StringUtils needs to use CFStringCompare
	- Look at new stuff in <Scrap.h>
	- Look at new menu stuff
	- Use kBlessedBusErrorBait
	- Use MacHelp
	- Use InstallTimeTask and InstallXTimeTask
	- Use new file iterators
	- Use ConstrainWindowToScreen
	- The input string and the output FSSpec must not overlap when using FSMakeFSSpec.
	- When using CopyBits to copy to or from a port, you need to pass a reference to the port's 
	  pixmap or bitmap to CopyBits. You should use the new Carbon function 
	  GetPortBitMapForCopyBits to do so.
	- Get rid of MStandardFile
	- Use Carbon Events (but stuff like kEventControlDeactivate only works on X?)
	- Look at Aqua Human Interface Guidelines
* Try DebugCarbonLib again.
* Get working on OS X:
	- Add a 'plst' resource
	- Remove the Quit menu item
	- XTimer needs to use timer events
	- Support new HFS+ stuff (eg long file names)
	- Support help tags
	- Add support for live window resizing
	- New window feature bit: kWindowIsOpaque (ie d/n need an alpha channel, saves memory)
* Install 6.1 patch on Windows.	
* Enable implicit conv warning for Whisper debug targets.
* InitSIOUX isn't quite right.
* Typedef std::auto_ptr to Take?
* Might be able to improve bind functions using classes local to the functions.
* Would be neat to write a really simple XML editor: color code elements and comments,
  maybe have a popup to go to top level elements, maybe a context menu to add new elements/
  attributes, maybe a verify command that does a parse.
* Add something like real time mark? Write out current and elapsed times for notable events
  like opening and closing documents.
* Need to work on windows XDisplay implementation.
* App needs to assert that it's boss name is "Application".
* On Carbon don't need to use a busy cursor (system pops it up automagicly when the app stops
  handling events).
* Use GetAvailableWindowPositioningBounds
* Need to support menus with bevel buttons and do some more testing.
* Object model could do an placement operator new to construct implementation objects. 
  So instead of creating lots of blocks for each interface we'd only create one.
* On Windows don't update menus until there's a menu click or accelerator keystroke. On
  the Mac update menus just enough to enable/disable them after every keystroke/click.
* SIOUXSetupTextWindow isn't quite right (ShowWindow is setting the wrong qd?). Email some
  bug reports to MetroWerks.
* Start using boost once it's thread safe.
* Write a script to create new projects? Or use stationary?
* UI layer requires Mac OS 8.5
* Use GetThemeMetric to get scrollbar width.
* Define Min using two template types?
* Oasis XML tests are now a SourceForge project?
* Write an overview doc: architecture, conventions, major classes, patterns
* Add a recommended reading doc?
* Write a Start Here html page:
	- put the other files in a subfolder
	- link to change history
	- link to status
	- link to design notes
	- etc
* Could also introduce an abstract boss class. When constructing one of these from an 
  XInterfacePtr or an XUnknown* an assert fires if the argument is missing a required 
  interface. XInterfacePtr will need a new ctor that takes an abstract boss. Would probably 
  have to do this by introducing a new type (maybe a template paramerterized on a boss name).
* Make sure circular plugin dependencies are handled correctly.
* Might want to look at having Core export some common container class instantiations
  (DLL only targets).
* Boss files specify the interfaces required of a plugin so it seems desirable to make a
  distinction between external and internal interfaces. Could do this by having query
  functions take an optional plugin id when querying for an internal interface.
* Plugins need a GetWhisperVersion export. Might want GetAppVersion as well. App's could 
  register a version number with the object model.
* On the Mac need to merge the Whisper DLLs into one DLL. Try to do something similar on Windows.
* Introduce the notion of a required plugin?
* Need to revisit calls to LockWindowUpdate (causes all windows to flash on NT 4). 
  Might want to blow off the redraw flag altogether (Windows seems to do a good job
  of queuing up WM_PAINT messages instead of processing them immediately).
* Email suggestion to MW:
	Building Win DLL on Mac (got the first one when building a monolithic app on Windows. after i deleted a file):
		Link Error   : Bad file information from IDE for file number 29949950
		Link Error   : Out of memory
	Building Win static lib on Mac:
		Link Error   : Invalid library:
* Files unit test should create shortcuts/aliaii and check that they're correctly resolved.
* Shouldn't use STL in interfaces (STL code is much more volatile than stuff like how a 
  compiler handles exceptions).
* Need to provide custom implementations of vector and list for use in interfaces.
* Email matumoto@math.keio.ac.jp and Cokus@math.washington.edu and say that the twister is
  being used inside Whisper.
* Plugins need GetWhisperVersion (don't want plugins linking to different Whisper versions)
* Look at ChangeDragBehaviors (in OS 9)
* Make sure singleton bosses are created after all plugins load
* XScrollBarControl::UpdateThumb doesn't look quite right.
* Make sure the menu code is using DisposeMenu.
* Work on Logos
* Carbon control manager has some support for drag and drop
* Metrowerks doesn't provide a way to replace the global operator new when building multi-
  fragment apps. This means that leak checking doesn't work. Unless Apple provides a solution
  in OS X, we might need to do this by hacking MW_MSL.Shlb.mcp
* Can't use the Mersenne Twister by default (the GNU library GPL is less restrictive than
  the normal GPL, but still way too much for commercial apps). Can handle this by ifdefing
  out the twister by default or going through a function pointer (so the twister is dead
  stripped if it's not used). Might also want to ask the twister guys to go to a less
  restrictive license (I think slashdot has pointers to a few of these).
* Implement simple printing.
* XAverageTimer should use QueryPerformanceTimer (we should be timing if the thread blocks).
* Look at TN 1104
* Add a XURLControl that opens the URL using the default browser? Can get the default browser
  using Internet Config on the Mac (see http://www.quinn.echidna.id.au/Quinn/Config/). Could
  use this in the sample apps in the about box to go to the Whisper home page.
* Look at the GrowZone code. Make sure nothing sets MemErr. Also look at the Time manager code.
* Nov 2000 Windows Dev Journal had a good article on using autocomplete and autosuggest
  with combo boxes (uses IAutoComplete).
* WindowRef wptr = reinterpret_cast<WindowRef>(event.message); isn't Carbon compliant?
* Might be able to do something like the following in RegisterAllControls:
	#define BUILD_PMINTERFACE(cn)		\
		InterfaceFactory *Get##cn##InterfaceFactory();	\
		InterfaceFactory *g##Test##cn##FaceFact = Get##cn##InterfaceFactory();
* Create a small locked handle high in the heap very early on. Fill it with a special
  pattern and make sure it's OK during each call to operator new (make this intense
  debugging only? or maybe check a few bytes at the end if not intense debugging?). 
  Might want to check that a local variable is above the handle (this check won't work
  too well with threads).
* MSIOUXExtension::OnStatus is bogus.
* When running multiple tests print num of tests run and OK if they all succeeded. Might want
  to print elapsed time as well. Print some sort of status after each test (maybe a period).
* Look at PETE (general template expression evaluator):
	www.acl.lanl.gov/pete/

* MSVC projects need a release rc file?
* Need to turn off the busy cursor in FragTerm?
* XSparseArray iterators should call operator++ if the *iter is the default value.
* Make sure DEBUGSTR works when a debugger isn't installed.
* XCFObject should start with an M.
* VC6 changes:
	a) New warnings: 4390, 4518, 4554
	b) __assume keyword (used with ASSERT)
	c) More runtime checks (using -GZ switch)
* Add a transaction class which takes callbacks for things to do and undo (in the event of an 
  exception). Last action doesn't need an undo.
* OS 9 features:
	- ATSUI (editing and imaging Unicode)
	- CoreFoundation stuff (prefs, XML, strings)
	  available from Carbon or OS 8 apps
	- Data Browser (tree view control)
	- File Manager (Unicode file names, files larger than 2G)
	- Multilingial Text Editor (MLTE) Unicode savvy text editor
	- Nav Services, new file filtering options, new NavCreatePreview call
	- Non-blocking notification alerts
	- Unicode Text Utilities (comparison, character properties, and text breaking)
	- UTCUtils, 64-bit time values (so won't break in 2039)
	- The File Manager now supports a new error code being returned from disk drivers, 
	  driverHardwareGoneErr (-503). Disk drivers should return this error in response 
	  to an I/O request to a drive whose device has been disconnected and can't be 
	  reconnected. This is especially useful for USB disk drivers.
	- A new extended version of the FindFolder routine has been added that accepts new 
	  flags and data parameters allowing for more precise control of the FindFolder 
	  operation.
	- Cursors can be set at interrupt time?
	- XSystemInfo::GetUserName should use the new Multiple Users stuff
	- Carbon has ScrollWindowRect.
	- Debugging.h has some interesting stuff. Might want to use ISLOWLEVELDEBUGGERCALLABLE
	  (and dup this macro for people not using the 3.3 Universal Headers).
	- Support an HTML read-only control?
	- New help system (want to use the callbacks?)
	- New locale stuff in MacLocales.h
* Work on view editor:
	- Use COM? Could use plugins for editors (eg window, menu, string table, etc). Could also 
	  use plugins to render controls given XXMLElement (these should create the control and 
	  render it into a provided pixmap).
	- Might want to use a custom DTD parser (so we can more easily determine attribute types
	  and do better validation). This could still be (mostly) compatible with a standard parser
	  using parameter entities.
	- Allow on the fly editing?
	- Implement drag and drop
	- XTextEditorControl should support drag and drop
	- Write view editor
	- Custom controls will be a bit dicy. Probably will need some sort of base_class attribute
	  and can't zap custom class elements.
	- There needs to be a way to associate balloon help with control elements: Maybe something
	  like this:
		<XControlAttribute element = "XControlInfo" attribute = "name" type = "string">
			<Description>The control name (this is used internally and is distinct from the control's label or text fields).</Description>
		</XControlAttribute>
	- Use an extension to attach a controls XML to the XControl?
	- Use an inspector to edit windows and controls? (Might be better to use a dialog:
	  streaming controls out and in may be too slow for an inspector).
	- Use context menu to:
		` poup color picker
		` select enum (eg "false" or "true")
		` select flags (checks or unchecks items, eg for control styles)
	- Status bar should show help when move over inspector fields
	- Get floating windows working
	- Use a floater to list controls defined in DTD(s)
	- Implement a hierarchical table class
	- Add dialog, window, text traits, and pen editors
* Create a small locked handle high in the heap very early on. Fill it with a special
  pattern and make sure it's OK during each call to operator new (make this intense
  debugging only? Or maybe check a few bytes at the end if not intense debugging?). 
  Might want to check that a local variable is above the handle (this check won't work
  too well with threads).
* Look into using the new stuff in <UnicodeUtilities.h> 
* Make sure lot's of files can be dropped on a Windows app (Usenet post said the command line
  length had a rather small max size). May need to use Shell DDE or OLE Drag and Drop.
* Instead of using _MAX_PATH might be better to use a custom buffer class that uses GetVolumeInformation
  and lpMaximumComponentLength to determine how large the buffer needs to be.
* Work on Carbon support:
	- XMenu should support MenuAttributes (might want to add these to XML)
	- Use the new event model?
	- Use new debugging functions in <MacMemory.h> (might also want too add some new debug 
	  extensions)
	- Support CarbonEvents? IsUserCancelEventRef? Timers? CreateMouseEvent?
	- Try linking against LiteCarbonLib?
	- Restore MEventDispatcher::HandleTime
* Implement IconEdit's "Magnify Other" command. Probably want to handle dialog like in Raven.
* Support triple clicks. On Windows need to use GetDoubleClickTime and SM_CXDOUBLECLK/SM_CYDOUBLECLK
  (with GetSystemMetrics).
* Need to speed up the XML Parser, especially on Windows. Might want to rewrite it using COM
  too. (Might make it easier to swap in the CF parser or to switch in a lighter-weight 
  validator).
* The XML parser should use validation objects:
	- add an XXMLParser::Parse overload that takes an XXMLBaseValidator object
	- provide an XXMLValidator (validates per the XML 1.0 spec) and an XXMLNullValidator
	  (skips over the external subset and all DTD declarations in the internal subset)
	- add a comment warning about v disadvantages, eg
		// Like Parse except that none of the DTD declarations are parsed
		// and the external subset is skipped over. This will usually be 
		// slightly faster than Parse and if the app never calls Parse the
		// linker will dead strip the DTD parser which will provide a 
		// substantial space savings. However there are some disadvantages:
		// 1) Missing attributes are no longer given default values.
		// 2) The only entities you can use are amp, lt, gt, apos, and quot.
		// 3) Parse will normalize all attributes but CDATA by discarding
		//    leading and trailing spaces, and by replacing sequences of
		//    spaces with a single space. None of this will be done when
		//    ParseButSkipDTD is used.
		// 4) It's no longer possible for the parser to determine which
		//    elements can contain character data so any whitespace between
		//    elements is returned as XXMLCharData.
		// 5) Applications may need to perform additional validation.
	- change IconEdit so that it uses an XXMLStubValidator when reading docs
	- get release IconEdit sizes for each validator and when no XML parsing is done
	- make sure release IconEdit doesn't link in DTD parsing classes, regular expression code,
	  DFA code, etc
	- is using XXMLNullValidator might want to throw if standalone = "no"
	- get rid of OptimizeStandAloneDocuments?
	- might want to create a subclass of XXMLValidator that recognizes more attribute types
	  (eg BOOL, FLOAT, POINT, RECT, etc)
	- create an XXMLSchemaValidator? probably want to wait until schema proposal is closer
	  to 
* Implement little arrows
* Use pthreads on Carbon
* Use SunTest folder to test XML.
* Create a d&d app to convert Quill files to XML
* Add an XMementoUndo command. Use a template? Base class for mementos? Mementos that
  compare equal should be merged together (this is similar to Swing's StateEditable class).
* Purge undo stack by memory used not number of items. Might also want to retain the
  stack after save.
* Protecting the operator new heap can be a significant bottleneck (see http://msdn.microsoft.com/isapi/msdnlib.idc?theURL=/library/techart/heap3.htm),
  but NT does very well here:
		Evaluate your code with Windows NT5 heap; it should be optimal for blocks of less than 1,024 bytes (1 KB)
       (blocks from front-end allocator). GlobalAlloc() and LocalAlloc() build on the same heap and are
       common mechanisms to access the per-process heaps. Use Heap* APIs to access the per-process heap, or
       to create your own heaps for allocation operations if high localized performance is desired. You can also use
       VirtualAlloc() / VirtualFree() operations directly if needed for large block operations.

       The described improvements made their way into Windows NT 5.0 beta 2 and Windows NT 4.0 SP4. After the
       changes, the rate of heap lock contention fell significantly. This benefits all direct users of Win32 heaps. The
       CRT heap is built on top of the Win32 heap, but uses its own small-block heap and hence does not benefit
       from Windows NT changes. (Visual C++ version 6.0 also has an improved heap allocator.)* Work on progress dialog.
* Write an XML drag and drop validator?
* Should be a way to create a plain or shadowed dialog? Would be useful for about boxes...
* Take another shot at garbage collection. (first change collections to use raw pointers)
* Email MW about SIOUX:
	- Shouldn't be using qd.screenBits (use GetGrayRgn instead).
	- Doesn't work with floaters.
	- Poor event handling.
* HeapAlloc is 4-byte aligned on 95?
* Optionally use CFXMLParser?
* Can use WBMPImageSource on Mac via QuickTime?
* Trace menu won't be updated if manually change categories.
* Use ResizeWindow under 8.6
* Would be cool to (optionally?) popup a dialog at startup in debug builds allowing the
  user to pick one of the App Strings locales to be selected.
* Create an app that will automatically generate a hlp source file?
* Use Intel CPU detection code?
* Add XInStream::SetDataEndian (useful when stream is missing a header).
* Look into using WM_MOUSELEAVE. Note that Feb 1999 Windows Developer Journal has code for
  doing this on Win95.
* Change XSet to have a default less template argument.
* timeGetTime has poor resolution on NT (need to call timeBeginPeriod).
* Use QueryPerformanceCounter? (Only available on Pentiums and up, but returns false
  if not available).  Note that according to Tony Cox this uses RDTSC when available.
  http://www.i21.com/~tjump has examples of using this stuff (some people claim that
  QPC has mucg higher latency than RDTSC).
* If ChangeDisplaySettings is used to set bit depth a reboot is required for Win95 (prior to OSR2).
* SetFileLock and SetNameLock should use MoreFiles.
* InitializeToolbox should probably call InitCursor
* If can't figure out how to implement XSystemInfo::HasFPU on Windows make it Mac only.
* Buy Vopt (excellent PC disk util).
* Might be nice if ASSERT dialog included stack crawl if not running with high level
  debugger. Might also want a save to file button (or automatically save to a file?).
* Alex Rosenberg <alexr@goonsquad.spies.com> says that MSVC doesn't compare NANs correctly?
* Exit action shouldn't use a set.
* Add layout managers:
	- add GetPreferredSize. Mac controls should use HIG sizes
	- add some simple layout managers
	- need to be careful when growing super control (eg if trigger control has mBinding set)
	- add Mac layout manager (use HIG for spacing)
	- add Win layout manager
	- need to be able to attach layout managers in XML (probably need to make these create by
	  nameable)
	- might want debug extension to translate control text (eg "OK****" where num asterisks
	  is random) and invoke layout manager
	- use translated window if available?
* Look into using FlashWindow in ReportError.
* Work on Resources (in OS?):
	- XMegaFile should have subclasses that use XFile and XMemoryMappedFile. Wormwood
	  could use XMemoryMappedFile on both sides.
	- LoadString functions should be function pointers. 
	- XResourceMgr should save old LoadString pointer and install a new one.
* Write a drag and drop app to build mega files:
	- Use an Options.txt file to set options. Some possibilities include:
		USE_MEGA_IMAGE - Instead of saving PICT or PCX files images are stored in a custom format.
		COMPRESS_MEGA_IMAGES - Can specify stuff like RLE, ZLIB, NONE, or BEST.
	- Write out actions to a report log.
	- File names should look like 256 (Flying Owl).pcx
	- Should resource names be added to mega file? Make this an option?
* Nice if had a (simple) XPictImage class. If do this could get rid of GetOSContext from
  XImageSink which would allow the use of a light weight XImageBuffer class. paintlib
  has code: http://www.cs.tu-berlin.de/~uzadow/paintlib
* Nice if WBMPImage was cross platform.
* Stream classes should have a CompilerCheck function. Make sure floats and doubles
  are IEEE (cast to an int32 and check bit pattern).
* Might want to have an XPathShape (path on Windows, region on Mac).
* Implement win help (seems dubious: see 11/16/98 design notes entry):
	- Create a WHelpWindow class
	- Pops up a window similar to WinHelp secondary window
	- Position the window so that's it's on screen and doesn't cover control
	- Window closes when user presses mouse button or a key (need to capture mouse)
	- Default context menu should have a "What's This?" item (posts WM_HELP message)
	- XControl should create a help window after getting WM_HELP 
	- Make sure F1 key works

Windows To Do:

* Use QueryPerformanceCounter instead of timeGetTime? Only on Pentium's?
* See if MacApp's SetMemory is faster than MSVC (also try using doubles).
* Make sure STL specializations are working (and being inlined).
* Can DC DIBSection is based on be deleted before DIBSection?
* Can DIBSection draw into a different (but compatible) DC?
* Look into Intel's VTUNE profiler. Also NuMega's TrueTime (unlike VTune this isn't a sampling
  profiler so it's better at global profiling).



template<class T, class A> class vector;
template<class KEY, class TYPE, class COMPARE, class ALLOCATOR> class map;

typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;

typedef int                 INT;
typedef unsigned int        UINT;

typedef UINT 				WPARAM;
typedef LONG 				LPARAM;
typedef LONG 				LRESULT;

typedef CHAR*				LPSTR;
typedef WCHAR*				LPWSTR;
typedef TCHAR*				LPTSTR;
typedef const WCHAR*		LPCWSTR;
typedef const TCHAR*		LPCTSTR;


_MSC_VER is 1100 for MSVC 5, 1200 for MSVC 6 (but 900 when compiling with CW!)
__MWERKS__ is 0x2200 for CW 4
			  0x2201 for CW 4.1
			  0x2300 for CW 5.0
			  0x2301 for CW 5.2
			  0x2400 for CW 6.0


<vector>




<http://www.halcyon.com/www3/jesjones/Whisper/Home.html>
<http://sourceforge.net/projects/whisper2/>

<ftp://ftp.halcyon.com//pub/users/jesjones/Whisper-2.0.sit>
<ftp://ftp.halcyon.com//pub/users/jesjones/Whisper 1.0.sit>
<ftp://ftp.halcyon.com//pub/users/jesjones/Whisper 1.0 Examples.sit>
<ftp://ftp.halcyon.com//pub/users/jesjones/AppSizer.sit>

carbon_development@sam.apple.com


__MC68K__ 
__INTEL__ 
__POWERPC__ 

#if MULTI_FRAGMENT_APP && PRAGMA_EXPORT_SUPPORTED
	#pragma export on
#endif


#if MULTI_FRAGMENT_APP && PRAGMA_EXPORT_SUPPORTED
	#pragma export reset
#endif



	if (attribute.GetDefaultType() != kImpliedAttribute || inValue.length() != 0) {
