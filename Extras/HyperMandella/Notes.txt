To Do: 						

* See if things get screwed up when a menu is pulled down and the fractal is drawing.
* Use MitchellFilter function
* Don't allow user to add a palette with the same name.
* Rebuild UI project.
* Add a Window menu (probably want to use Carbon for this)
* Write a QuickTime image importer? Default to mac only.
* Write a QuickTime image exporter? Need QT 4.1
* Write QT unit tests.
* Extract the OnComputeDwell pointer from the vtable and use some custom glue to call it?
* Need to init render info based on fractal formula
* Cursors are pretty poor on Windows...
* Write some docs.
* Upload?

Version 2.0

* Add a renderer that uses marching cubes algorithm and QD3D? Could also optionally show
  draggable lights in this view.
* Add Setup dialog (or maybe use inspector windoids?):
	- Display xy and xz graphs. Or use QD3D?
	- Graphs contain:
		lights (interior is colored with light color)
		eye
		hither and yon planes
		point of interest
		fractal surface (line segments whose width vary with dz along surface col)
		dashed line connecting eye to point of interest
		axis lines (with tick marks)
		labels outside graph (which axis and a value)
	- Can select most objects:
		` Use Diner style region ants to indicate selection
		` Mouse changes to a hand when over movable selection (lite, eye, hither and yon,
		  point of interest)
		` If drag outside pane coordinates are reset (when release mouse).
		` Use a well(?) between graphs from which light can be dragged out of. Might also
		  want directional lights.
		` Lights can be deleted by backspacing when they're selected.
		` All changes should be undoable.
		` Include a CFractalPane that automatically redraws (with small draw ticks).
		` Fractal surface should update with CFractalPane.
		` When select an object get new inspector groupbox:
			- Title should be a menu so can select overlapping objects. Note that this has
			  to be dynamic for arbitrary lights.
			- Pretty much everything should be settable from inspector. Surface should
			  include shading model and paramaters.
		` Real common stuff (like constant, w, formula, color style, etc) should also be
		  settable from menu.
		` Revise CFractalView context menu.
	- Include Save button.
* Try Strauss shader.
* Optionally do full ray trace. Stop a ray when it travels more than half the max corner
  to corner distance. Or exits frustrum?


template<class T, class A> class vector;
template<class KEY, class TYPE, class COMPARE, class ALLOCATOR> class map;


9.6 seconds (no optimizations in FractalFormulas.cpp)
7.2 seconds (with optimizations)
14.7 seconds (high level)


